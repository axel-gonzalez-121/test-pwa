{"version":3,"sources":["logo.svg","firebase.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","askForPermissioToReceiveNotifications","messaging","requestPermission","then","getToken","token","console","log","catch","err","useEffect","className","src","logo","alt","href","target","rel","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qNAAe,G,MAAA,IAA0B,kC,QCYzCA,IAASC,cAVc,CACtBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKDR,QAAf,E,eCiCeS,EA1CH,WAEX,SAASC,IACR,IAAMC,EAAYX,EAASW,YAC3BA,EAAUC,oBAAoBC,MAAK,WACjC,OAAOF,EAAUG,cAChBD,MAAK,SAAAE,GACNC,QAAQC,IAAI,WAAWF,MACtBG,OAAM,SAACC,GACRH,QAAQC,IAAIE,MAQf,OAJAC,qBAAU,WACTV,MACE,IAGF,qBAAKW,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oDACoB,yCADpB,8CAGA,mBACCH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJL,6BAUA,wBAAQC,QAASlB,EAAjB,iCC3BgBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAC6B,GACLA,EAAaC,gBAEdzB,OAAM,SAAC0B,GACN5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.c2797a6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyBUAXUSbXSLoX7baq3RqNVRCCM_MwwlTKA\",\r\n\tauthDomain: \"push-test-8543c.firebaseapp.com\",\r\n\tprojectId: \"push-test-8543c\",\r\n\tstorageBucket: \"push-test-8543c.appspot.com\",\r\n\tmessagingSenderId: \"222177857579\",\r\n\tappId: \"1:222177857579:web:b71df4c74397f5d79c1a6e\",\r\n\tmeasurementId: \"G-7M0X3NYC1N\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport firebase from './firebase';\nimport './App.css';\n\nconst App = () => {\n\n\tfunction askForPermissioToReceiveNotifications(){\n\t\tconst messaging = firebase.messaging()\n\t\tmessaging.requestPermission().then(()=>{\n\t\t  return messaging.getToken()\n\t\t}).then(token=>{\n\t\t  console.log('Token : ',token)\n\t\t}).catch((err)=>{\n\t\t  console.log(err);\n\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\taskForPermissioToReceiveNotifications();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>\n\t\t\t\t\tPush notifications <code>tests</code> permite las notificaciones para testear\n\t\t\t\t</p>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tA ver que ondas\n\t\t\t\t</a>\n\n\n\t\t\t\t<button onClick={askForPermissioToReceiveNotifications} >\n\t\t\t\t\tNotifications\n\t\t\t\t</button>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n    //    const swUrl = `${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import { initializeFirebase } from './firebase';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// if ('serviceWorker' in navigator) {\n// \tnavigator.serviceWorker.register('../firebase-messaging-sw.js')\n// \t.then(function(registration) {\n// \t  console.log('Registration successful, scope is:', registration.scope);\n// \t}).catch(function(err) {\n// \t  console.log('Service worker registration failed, error:', err);\n// \t});\n//   }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n// initializeFirebase();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}